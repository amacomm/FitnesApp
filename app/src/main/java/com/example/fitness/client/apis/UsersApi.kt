/**
 * Tracker API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package com.example.fitness.client.apis

import com.example.fitness.client.infrastructure.*
import com.example.fitness.client.models.AuthRequest
import com.example.fitness.client.models.AuthResponse
import com.example.fitness.client.models.EditUserRequest
import com.example.fitness.client.models.RegisterRequest
import com.example.fitness.client.models.RevokeTokenRequest
import com.example.fitness.client.models.UserDto

class UsersApi(basePath: kotlin.String = "/") : ApiClient(basePath) {

    /**
     * Edit user data
     * 
     * @param body  (optional)
     * @return void
     */
    fun apiUsersEditUserPut(body: EditUserRequest? = null): Unit {
        val localVariableBody: kotlin.Any? = body
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/api/Users/editUser"
        )
        val response = request<Any?>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Retrieve all users
     * 
     * @return kotlin.Array<UserDto>
     */
    @Suppress("UNCHECKED_CAST")
    fun apiUsersGet(): kotlin.Array<UserDto> {
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/Users"
        )
        val response = request<kotlin.Array<UserDto>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<UserDto>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Retrieve a specific user by ID
     * 
     * @param id  
     * @return UserDto
     */
    @Suppress("UNCHECKED_CAST")
    fun apiUsersIdGet(id: kotlin.String): UserDto {
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/Users/{id}".replace("{" + "id" + "}", "$id")
        )
        val response = request<UserDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as UserDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Retrieve the profile image of a user
     * 
     * @param id  
     * @return kotlin.ByteArray
     */
    @Suppress("UNCHECKED_CAST")
    fun apiUsersIdImageGet(id: kotlin.String): kotlin.ByteArray {
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/Users/{id}/image".replace("{" + "id" + "}", "$id")
        )
        val response = request<kotlin.ByteArray>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.ByteArray
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Attempt to login with provided credentials and get tokens if successful
     * 
     * @param body  (optional)
     * @return AuthResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun apiUsersLoginPost(body: AuthRequest? = null): AuthResponse {
        val localVariableBody: kotlin.Any? = body
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/api/Users/login"
        )
        val response = request<AuthResponse>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as AuthResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Retrieve currently logged in user
     * 
     * @return UserDto
     */
    @Suppress("UNCHECKED_CAST")
    fun apiUsersMeGet(): UserDto {
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/Users/me"
        )
        val response = request<UserDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as UserDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get new access and refresh tokens by active refresh token
     * 
     * @return AuthResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun apiUsersRegenerateAccessTokenPost(): AuthResponse {
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/api/Users/regenerateAccessToken"
        )
        val response = request<AuthResponse>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as AuthResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Register new user
     * 
     * @param body  (optional)
     * @return void
     */
    fun apiUsersRegisterPost(body: RegisterRequest? = null): Unit {
        val localVariableBody: kotlin.Any? = body
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/api/Users/register"
        )
        val response = request<Any?>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Revoke refresh token (revoke refresh token stored in cookie if no specific token provided)
     * 
     * @param body  (optional)
     * @return void
     */
    fun apiUsersRevokeTokenPost(body: RevokeTokenRequest? = null): Unit {
        val localVariableBody: kotlin.Any? = body
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/api/Users/revokeToken"
        )
        val response = request<Any?>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
