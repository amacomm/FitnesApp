/**
 * Tracker API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package com.example.fitness.client.apis

import com.example.fitness.client.infrastructure.*
import com.example.fitness.client.models.UserFollow

class FollowsApi(basePath: kotlin.String = "/") : ApiClient(basePath) {

    /**
     * Remove a user follow
     * 
     * @param followedUserId  
     * @return void
     */
    fun apiFollowsFollowedUserIdDelete(followedUserId: kotlin.String): Unit {
        val localVariableConfig = RequestConfig(
                RequestMethod.DELETE,
                "/api/Follows/{followedUserId}".replace("{" + "followedUserId" + "}", "$followedUserId")
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Add a new user follow
     * 
     * @param followedUserId  
     * @return void
     */
    fun apiFollowsFollowedUserIdPost(followedUserId: kotlin.String): Unit {
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/api/Follows/{followedUserId}".replace("{" + "followedUserId" + "}", "$followedUserId")
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get user followers by ID
     * 
     * @param id  
     * @return kotlin.Array<UserFollow>
     */
    @Suppress("UNCHECKED_CAST")
    fun apiFollowsIdFollowersGet(id: kotlin.String): kotlin.Array<UserFollow> {
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/Follows/{id}/followers".replace("{" + "id" + "}", "$id")
        )
        val response = request<kotlin.Array<UserFollow>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<UserFollow>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get user follows by ID
     * 
     * @param id  
     * @return kotlin.Array<UserFollow>
     */
    @Suppress("UNCHECKED_CAST")
    fun apiFollowsIdGet(id: kotlin.String): kotlin.Array<UserFollow> {
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/Follows/{id}".replace("{" + "id" + "}", "$id")
        )
        val response = request<kotlin.Array<UserFollow>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<UserFollow>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
