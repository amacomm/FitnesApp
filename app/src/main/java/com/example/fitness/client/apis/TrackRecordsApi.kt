/**
 * Tracker API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package com.example.fitness.client.apis

import com.example.fitness.client.infrastructure.*
import com.example.fitness.client.models.AddTrackRecordRequest
import com.example.fitness.client.models.EditTrackRecordRequest
import com.example.fitness.client.models.TrackRecordDto

class TrackRecordsApi(basePath: kotlin.String = "/") : ApiClient(basePath) {

    /**
     * Remove a track record
     * 
     * @param id  
     * @return void
     */
    fun apiTrackRecordsIdDelete(id: kotlin.Int): Unit {
        val localVariableConfig = RequestConfig(
                RequestMethod.DELETE,
                "/api/TrackRecords/{id}".replace("{" + "id" + "}", "$id")
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get a track record by ID
     * 
     * @param id  
     * @return TrackRecordDto
     */
    @Suppress("UNCHECKED_CAST")
    fun apiTrackRecordsIdGet(id: kotlin.Int): TrackRecordDto {
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/TrackRecords/{id}".replace("{" + "id" + "}", "$id")
        )
        val response = request<TrackRecordDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as TrackRecordDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Add a new track record to current user
     * 
     * @param body  (optional)
     * @return void
     */
    fun apiTrackRecordsPost(body: AddTrackRecordRequest? = null): Unit {
        val localVariableBody: kotlin.Any? = body
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/api/TrackRecords"
        )
        val response = request<Any?>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Edit an existing track record
     * 
     * @param body  (optional)
     * @return void
     */
    fun apiTrackRecordsPut(body: EditTrackRecordRequest? = null): Unit {
        val localVariableBody: kotlin.Any? = body
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/api/TrackRecords"
        )
        val response = request<Any?>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get track records for a user
     * 
     * @param userId  
     * @return kotlin.Array<TrackRecordDto>
     */
    @Suppress("UNCHECKED_CAST")
    fun apiTrackRecordsUserUserIdGet(userId: kotlin.String): kotlin.Array<TrackRecordDto> {
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/TrackRecords/user/{userId}".replace("{" + "userId" + "}", "$userId")
        )
        val response = request<kotlin.Array<TrackRecordDto>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<TrackRecordDto>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
